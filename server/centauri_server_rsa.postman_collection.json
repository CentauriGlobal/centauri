{
	"info": {
		"_postman_id": "7aad3c7b-b8e8-477f-a6a5-20f04fd1de3f",
		"name": "centauri_server_rsa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "present_m",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library",
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"",
							"/***********设置时间戳************/",
							"var req_ts=Math.round(new Date()/1000);",
							"pm.globals.unset(\"ts\");",
							"pm.globals.set(\"ts\", req_ts);",
							"",
							"const stringifyValue = (value) => {",
							"  if (value === null || value === undefined) {",
							"    return ``;",
							"  }",
							"  if (typeof value === `object`) {",
							"    return JSON.stringify(value);",
							"  }",
							"  return String(value);",
							"};",
							"",
							"/***********签名算法************/",
							"let jsonBody = {};",
							"const paramsString = request.url.split('?')[1];",
							"const eachParamArray = paramsString.split('&');",
							"eachParamArray.forEach((param) => {",
							"    const key = param.split('=')[0];",
							"    const value = param.split('=')[1];",
							"    Object.assign(jsonBody, {[key]: value});",
							"});",
							"delete jsonBody.sig",
							"jsonBody[\"ts\"]=req_ts",
							"",
							"const queryString = Object.keys(jsonBody)",
							"      .sort()",
							"      .filter((key) => jsonBody[key] !== undefined)",
							"      .map((key) => `${key}=${stringifyValue(jsonBody[key])}`)",
							"      .join(`&`);",
							"",
							"const privKey = pm.globals.get('PRIVATE_KEY')",
							"",
							"var sig = new pmlib.rs.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
							"sig.init(privKey)",
							"",
							"const appkey=pm.globals.get('APP_KEY')",
							"console.log(`params : ${queryString+appkey}`);",
							"var hash = sig.signString(queryString+appkey);",
							"",
							"const signedEncoded = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(hash));",
							"console.log(`sig : ${signedEncoded}`)",
							"",
							"/***********设置全局sig************/",
							"pm.globals.unset(\"sig\");",
							"pm.globals.set('sig', signedEncoded, String);",
							"pm.environment.set(\"sig\", signedEncoded);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "org_loc=/v3/r/mpay/present_m ",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_id=hy_gameid",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_type=st_dummy",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://sandbox.centauriglobal.com/v3/r/mpay/present_m?appid=1450011705&openid=10272906747473823887&openkey=openkey&pf=wechat_abroad_wx-2001-android-2011&pfkey=pfkey&zoneid=1&billno=202104122316&presenttimes=10&ts={{ts}}&sig={{sig}}&sig_type=rsa_sha256",
					"protocol": "https",
					"host": [
						"sandbox",
						"centauriglobal",
						"com"
					],
					"path": [
						"v3",
						"r",
						"mpay",
						"present_m"
					],
					"query": [
						{
							"key": "appid",
							"value": "1450011705"
						},
						{
							"key": "openid",
							"value": "10272906747473823887"
						},
						{
							"key": "openkey",
							"value": "openkey"
						},
						{
							"key": "pf",
							"value": "wechat_abroad_wx-2001-android-2011"
						},
						{
							"key": "pfkey",
							"value": "pfkey"
						},
						{
							"key": "zoneid",
							"value": "1"
						},
						{
							"key": "billno",
							"value": "202104122316"
						},
						{
							"key": "presenttimes",
							"value": "10"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "sig",
							"value": "{{sig}}"
						},
						{
							"key": "sig_type",
							"value": "rsa_sha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_balance_m",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library",
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"",
							"/***********设置时间戳************/",
							"var req_ts=Math.round(new Date()/1000);",
							"pm.globals.unset(\"ts\");",
							"pm.globals.set(\"ts\", req_ts);",
							"",
							"const stringifyValue = (value) => {",
							"  if (value === null || value === undefined) {",
							"    return ``;",
							"  }",
							"  if (typeof value === `object`) {",
							"    return JSON.stringify(value);",
							"  }",
							"  return String(value);",
							"};",
							"",
							"/***********签名算法************/",
							"let jsonBody = {};",
							"const paramsString = request.url.split('?')[1];",
							"const eachParamArray = paramsString.split('&');",
							"eachParamArray.forEach((param) => {",
							"    const key = param.split('=')[0];",
							"    const value = param.split('=')[1];",
							"    Object.assign(jsonBody, {[key]: value});",
							"});",
							"delete jsonBody.sig",
							"jsonBody[\"ts\"]=req_ts",
							"",
							"const queryString = Object.keys(jsonBody)",
							"      .sort()",
							"      .filter((key) => jsonBody[key] !== undefined)",
							"      .map((key) => `${key}=${stringifyValue(jsonBody[key])}`)",
							"      .join(`&`);",
							"",
							"const privKey = pm.globals.get('PRIVATE_KEY')",
							"",
							"var sig = new pmlib.rs.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
							"sig.init(privKey)",
							"",
							"const appkey=pm.globals.get('APP_KEY')",
							"console.log(`params : ${queryString+appkey}`);",
							"var hash = sig.signString(queryString+appkey);",
							"const signedEncoded = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(hash));",
							"console.log(`sig : ${signedEncoded}`)",
							"",
							"/***********设置全局sig************/",
							"pm.globals.unset(\"sig\");",
							"pm.globals.set('sig', signedEncoded, String);",
							"pm.environment.set(\"sig\", signedEncoded);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "org_loc=/v3/r/mpay/get_balance_m ",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_id=hy_gameid",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_type=st_dummy",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://sandbox.centauriglobal.com/v3/r/mpay/get_balance_m?appid=1450011705&openid=10272906747473823887&openkey=openkey&pf=wechat_abroad_wx-2001-android-2011&pfkey=pfkey&zoneid=1&sig_type=rsa_sha256&ts={{ts}}&sig={{sig}}",
					"protocol": "https",
					"host": [
						"sandbox",
						"centauriglobal",
						"com"
					],
					"path": [
						"v3",
						"r",
						"mpay",
						"get_balance_m"
					],
					"query": [
						{
							"key": "appid",
							"value": "1450011705"
						},
						{
							"key": "openid",
							"value": "10272906747473823887"
						},
						{
							"key": "openkey",
							"value": "openkey"
						},
						{
							"key": "pf",
							"value": "wechat_abroad_wx-2001-android-2011"
						},
						{
							"key": "pfkey",
							"value": "pfkey"
						},
						{
							"key": "zoneid",
							"value": "1"
						},
						{
							"key": "sig_type",
							"value": "rsa_sha256"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "sig",
							"value": "{{sig}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "pay_m",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var datejson=pm.response.json();\r",
							"var databillno=datejson.billno;\r",
							"pm.environment.set(\"billno\",databillno);\r",
							" "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library",
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"",
							"/***********设置时间戳************/",
							"var req_ts=Math.round(new Date()/1000);",
							"pm.globals.unset(\"ts\");",
							"pm.globals.set(\"ts\", req_ts);",
							"",
							"const stringifyValue = (value) => {",
							"  if (value === null || value === undefined) {",
							"    return ``;",
							"  }",
							"  if (typeof value === `object`) {",
							"    return JSON.stringify(value);",
							"  }",
							"  return String(value);",
							"};",
							"",
							"/***********签名算法************/",
							"let jsonBody = {};",
							"const paramsString = request.url.split('?')[1];",
							"const eachParamArray = paramsString.split('&');",
							"eachParamArray.forEach((param) => {",
							"    const key = param.split('=')[0];",
							"    const value = param.split('=')[1];",
							"    Object.assign(jsonBody, {[key]: value});",
							"});",
							"delete jsonBody.sig",
							"jsonBody[\"ts\"]=req_ts",
							"",
							"const queryString = Object.keys(jsonBody)",
							"      .sort()",
							"      .filter((key) => jsonBody[key] !== undefined)",
							"      .map((key) => `${key}=${stringifyValue(jsonBody[key])}`)",
							"      .join(`&`);",
							"",
							"const privKey = pm.globals.get('PRIVATE_KEY')",
							"",
							"var sig = new pmlib.rs.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
							"sig.init(privKey)",
							"",
							"const appkey=pm.globals.get('APP_KEY')",
							"console.log(`params : ${queryString+appkey}`);",
							"var hash = sig.signString(queryString+appkey);",
							"const signedEncoded = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(hash));",
							"console.log(`sig : ${signedEncoded}`)",
							"",
							"/***********设置全局sig************/",
							"pm.globals.unset(\"sig\");",
							"pm.globals.set('sig', signedEncoded, String);",
							"pm.environment.set(\"sig\", signedEncoded);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "org_loc=/v3/r/mpay/pay_m ",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_id=hy_gameid",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_type=st_dummy",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://sandbox.centauriglobal.com/v3/r/mpay/pay_m?appid=1450011705&openid=10272906747473823887&openkey=openkey&pf=wechat_abroad_wx-2001-android-2011&pfkey=pfKey&amt=1000&billno=202104122315&zoneid=1&appremark=213432432&ts={{ts}}&sig={{sig}}&sig_type=rsa_sha256",
					"protocol": "https",
					"host": [
						"sandbox",
						"centauriglobal",
						"com"
					],
					"path": [
						"v3",
						"r",
						"mpay",
						"pay_m"
					],
					"query": [
						{
							"key": "appid",
							"value": "1450011705"
						},
						{
							"key": "openid",
							"value": "10272906747473823887"
						},
						{
							"key": "openkey",
							"value": "openkey"
						},
						{
							"key": "pf",
							"value": "wechat_abroad_wx-2001-android-2011"
						},
						{
							"key": "pfkey",
							"value": "pfKey"
						},
						{
							"key": "amt",
							"value": "1000"
						},
						{
							"key": "billno",
							"value": "202104122315"
						},
						{
							"key": "zoneid",
							"value": "1"
						},
						{
							"key": "appremark",
							"value": "213432432"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "sig",
							"value": "{{sig}}"
						},
						{
							"key": "sig_type",
							"value": "rsa_sha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "cancel_pay_m",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library",
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"",
							"/***********设置时间戳************/",
							"var req_ts=Math.round(new Date()/1000);",
							"pm.globals.unset(\"ts\");",
							"pm.globals.set(\"ts\", req_ts);",
							"",
							"const stringifyValue = (value) => {",
							"  if (value === null || value === undefined) {",
							"    return ``;",
							"  }",
							"  if (typeof value === `object`) {",
							"    return JSON.stringify(value);",
							"  }",
							"  return String(value);",
							"};",
							"",
							"/***********签名算法************/",
							"let jsonBody = {};",
							"const paramsString = request.url.split('?')[1];",
							"const eachParamArray = paramsString.split('&');",
							"eachParamArray.forEach((param) => {",
							"    const key = param.split('=')[0];",
							"    const value = param.split('=')[1];",
							"    Object.assign(jsonBody, {[key]: value});",
							"});",
							"delete jsonBody.sig",
							"jsonBody[\"ts\"]=req_ts",
							"",
							"const queryString = Object.keys(jsonBody)",
							"      .sort()",
							"      .filter((key) => jsonBody[key] !== undefined)",
							"      .map((key) => `${key}=${stringifyValue(jsonBody[key])}`)",
							"      .join(`&`);",
							"",
							"const privKey = pm.globals.get('PRIVATE_KEY')",
							"",
							"var sig = new pmlib.rs.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
							"sig.init(privKey)",
							"",
							"const appkey=pm.globals.get('APP_KEY')",
							"console.log(`params : ${queryString+appkey}`);",
							"var hash = sig.signString(queryString+appkey);",
							"const signedEncoded = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(hash));",
							"console.log(`sig : ${signedEncoded}`)",
							"",
							"/***********设置全局sig************/",
							"pm.globals.unset(\"sig\");",
							"pm.globals.set('sig', signedEncoded, String);",
							"pm.environment.set(\"sig\", signedEncoded);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "org_loc=/v3/r/mpay/cancel_pay_m ",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_id=hy_gameid",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session_type=st_dummy",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://sandbox.centauriglobal.com/v3/r/mpay/cancel_pay_m?appid=1450011705&openid=10272906747473823887&openkey=openkey&pf=wechat_abroad_wx-2001-android-2011&pfkey=pfkey&zoneid=1&billno=202104122315&ts={{ts}}&sig={{sig}}&sig_type=rsa_sha256",
					"protocol": "https",
					"host": [
						"sandbox",
						"centauriglobal",
						"com"
					],
					"path": [
						"v3",
						"r",
						"mpay",
						"cancel_pay_m"
					],
					"query": [
						{
							"key": "appid",
							"value": "1450011705"
						},
						{
							"key": "openid",
							"value": "10272906747473823887"
						},
						{
							"key": "openkey",
							"value": "openkey"
						},
						{
							"key": "pf",
							"value": "wechat_abroad_wx-2001-android-2011"
						},
						{
							"key": "pfkey",
							"value": "pfkey"
						},
						{
							"key": "zoneid",
							"value": "1"
						},
						{
							"key": "billno",
							"value": "202104122315"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "sig",
							"value": "{{sig}}"
						},
						{
							"key": "sig_type",
							"value": "rsa_sha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_product_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library",
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"",
							"/***********设置时间戳************/",
							"var req_ts=Math.round(new Date()/1000);",
							"pm.globals.unset(\"ts\");",
							"pm.globals.set(\"ts\", req_ts);",
							"",
							"const stringifyValue = (value) => {",
							"  if (value === null || value === undefined) {",
							"    return ``;",
							"  }",
							"  if (typeof value === `object`) {",
							"    return JSON.stringify(value);",
							"  }",
							"  return String(value);",
							"};",
							"",
							"/***********签名算法************/",
							"let jsonBody = {};",
							"const paramsString = request.url.split('?')[1];",
							"const eachParamArray = paramsString.split('&');",
							"eachParamArray.forEach((param) => {",
							"    const key = param.split('=')[0];",
							"    const value = param.split('=')[1];",
							"    Object.assign(jsonBody, {[key]: value});",
							"});",
							"delete jsonBody.sig",
							"jsonBody[\"ts\"]=req_ts",
							"",
							"const queryString = Object.keys(jsonBody)",
							"      .sort()",
							"      .filter((key) => jsonBody[key] !== undefined)",
							"      .map((key) => `${key}=${stringifyValue(jsonBody[key])}`)",
							"      .join(`&`);",
							"",
							"const privKey = pm.globals.get('PRIVATE_KEY')",
							"",
							"var sig = new pmlib.rs.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
							"sig.init(privKey)",
							"",
							"const appkey=pm.globals.get('APP_KEY')",
							"console.log(`params : ${queryString+appkey}`);",
							"var hash = sig.signString(queryString+appkey);",
							"const signedEncoded = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(hash));",
							"console.log(`sig : ${signedEncoded}`)",
							"",
							"/***********设置全局sig************/",
							"pm.globals.unset(\"sig\");",
							"pm.globals.set('sig', signedEncoded, String);",
							"pm.environment.set(\"sig\", signedEncoded);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://sandbox.centauriglobal.com/api/oversea/get_product_list?offer_id=1450011705&channel=os_steam&currency_type=USD&product_type=save&ts={{ts}}&sig={{sig}}&sig_type=rsa_sha256",
					"protocol": "http",
					"host": [
						"sandbox",
						"centauriglobal",
						"com"
					],
					"path": [
						"api",
						"oversea",
						"get_product_list"
					],
					"query": [
						{
							"key": "offer_id",
							"value": "1450011705"
						},
						{
							"key": "channel",
							"value": "os_steam"
						},
						{
							"key": "currency_type",
							"value": "USD"
						},
						{
							"key": "product_type",
							"value": "save"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "sig",
							"value": "{{sig}}"
						},
						{
							"key": "sig_type",
							"value": "rsa_sha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Lib install",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200)",
							"    pm.globals.set(\"pmlib_code\", responseBody)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://joolfe.github.io/postman-util-lib/dist/bundle.js",
					"protocol": "https",
					"host": [
						"joolfe",
						"github",
						"io"
					],
					"path": [
						"postman-util-lib",
						"dist",
						"bundle.js"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/***********使用说明************/",
					"//1.参数中对于ts、sig设置为变量的形式{{ts}}、{{sig}}",
					"//2.设置全局的appkey,即APP_KEY=xxxxx ",
					"//3.设置全局的rsa私钥privatekey,即PRIVATE_KEY=xxxxx "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}